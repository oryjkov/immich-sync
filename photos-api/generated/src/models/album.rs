/*
 * Google Photos API
 *
 * API for accessing Google Photos functionalities.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Album {
    /// Identifier of the album.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Title of the album.
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// URL to the album.
    #[serde(rename = "productUrl", skip_serializing_if = "Option::is_none")]
    pub product_url: Option<String>,
    /// Indicates if the album is writable.
    #[serde(rename = "isWriteable", skip_serializing_if = "Option::is_none")]
    pub is_writeable: Option<bool>,
    /// Number of media items in the album.
    #[serde(rename = "mediaItemsCount", skip_serializing_if = "Option::is_none")]
    pub media_items_count: Option<String>,
    /// Base URL of the cover photo of the album.
    #[serde(rename = "coverPhotoBaseUrl", skip_serializing_if = "Option::is_none")]
    pub cover_photo_base_url: Option<String>,
    /// Identifier of the cover photo media item.
    #[serde(rename = "coverPhotoMediaItemId", skip_serializing_if = "Option::is_none")]
    pub cover_photo_media_item_id: Option<String>,
}

impl Album {
    pub fn new() -> Album {
        Album {
            id: None,
            title: None,
            product_url: None,
            is_writeable: None,
            media_items_count: None,
            cover_photo_base_url: None,
            cover_photo_media_item_id: None,
        }
    }
}

